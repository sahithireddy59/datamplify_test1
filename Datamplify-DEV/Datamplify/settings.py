"""
Django settings for Datamplify project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
from decouple import config

import logging,os

# BASE_DIR = Path(__file__).resolve().parent.parent


logging.basicConfig(
    level=logging.INFO,
    format='[%(asctime)s] %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent




# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-z4vw23@b281r8h!8t#y@y%4vg5xj-m(k1g$$-k&w-d+&gbrhei'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['172.16.17.159','127.0.0.1','localhost','*']




# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    #Oauth
    'oauth2_provider',
    'rest_framework',

    #Apps
    'authentication',
    'Connections',
    'FlowBoard',
    'TaskPlan',
    'Monitor',

    #swagger
    'drf_yasg',  

    "corsheaders",
    "app.scheduler"



]


CSRF_TRUSTED_ORIGINS = ['http://127.0.0.1:8000/','http://172.16.17.159/','http://127.0.0.1:4201/']

CORS_ALLOW_ALL_ORIGINS = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'oauth2_provider.middleware.OAuth2TokenMiddleware'


]

APPEND_SLASH = False

ROOT_URLCONF = 'Datamplify.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, "authentication/templates")],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'Datamplify.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


DATABASES = {
    'default': {
        'ENGINE': config('DB_ENGINE', default='django.db.backends.postgresql'),
        'NAME': config('DB_NAME', default='Datamplify2'),
        'USER': config('DB_USER', default='postgres'),
        'PASSWORD': config('DB_PASSWORD', default='postgres'),
        # Note: when running inside Docker, use host.docker.internal to reach host Postgres on Windows/Mac
        'HOST': config('DB_HOST', default='localhost'),
        'PORT': config('DB_PORT', default='5432'),
    }
}

#oauth2

AUTH_USER_MODEL = 'authentication.UserProfile'



CLIENT_ID = config("OAUTH_CLIENT_ID")

CLIENT_SECRET = config("OAUTH_CLIENT_SECRET")

Fernet_Key = config('DB_Fernet_Key').encode()

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'oauth2_provider.contrib.rest_framework.OAuth2Authentication',  
        
    )

}

# AUTHENTICATION_BACKENDS = [
#     'oauth2_provider.backends.OAuth2Backend',
# ]

OAUTH2_PROVIDER = {
    "ACCESS_TOKEN_EXPIRE_SECONDS": 57600,  # 1 hour
    "REFRESH_TOKEN_EXPIRE_SECONDS": 86400,  # 7 days
    'ROTATE_REFRESH_TOKEN': True,
}

# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static/')  # Or use an absolute path like '/var/www/Datamplify/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Mail

if DATABASES['default']['NAME'] =='Datamplify2':

    Link_url = 'http://202.65.155.119/'
    TOKEN_URL = 'http://172.16.17.159/v1/authentication/o/token/'
    REDIRECT_URI = 'http://172.16.17.159/v1/nocallback/'
    airflow_host = "http://202.65.155.123:8081/"
    airflow_url = "http://202.65.155.123:8081/auth/token"
    airflow_username = "airflow"
    airflow_password = "airflow"
    # Link_url = 'http://localhost:4201/'
    # TOKEN_URL = 'http://127.0.0.1:8000/v1/authentication/o/token/'
    # REDIRECT_URI = 'http://127.0.0.1:8000/v1/nocallback/'
    # airflow_host = "http://127.0.0.1:8080"
    # airflow_url = "http://127.0.0.1:8080/auth/token"
    # airflow_username = "airflow"
    # airflow_password = "airflow"
    
else:
    Link_url = 'http://localhost:4201/'
    TOKEN_URL = 'http://127.0.0.1:8000/v1/authentication/o/token/'
    REDIRECT_URI = 'http://127.0.0.1:8000/v1/nocallback/'
    airflow_host = "http://127.0.0.1:8081"
    airflow_url = "http://127.0.0.1:8081/auth/token"
    airflow_username = "airflow"
    airflow_password = "airflow"

# Optional environment overrides for endpoints and Airflow
# OAuth token endpoint override (useful for quick testing/failover)
TOKEN_URL = config('TOKEN_URL', default=TOKEN_URL)

# Airflow overrides so host/creds can be changed without code edits
airflow_host = config('AIRFLOW_HOST', default=airflow_host)
airflow_url = config('AIRFLOW_URL', default=airflow_url)
airflow_username = config('AIRFLOW_USERNAME', default=airflow_username)
airflow_password = config('AIRFLOW_PASSWORD', default=airflow_password)

EMAIL_BACKEND = config('EMAIL_BACKEND')
EMAIL_HOST = config('EMAIL_HOST')
EMAIL_USE_TLS = config('EMAIL_USE_TLS', cast=bool)
EMAIL_PORT = config('EMAIL_PORT', cast=int)
EMAIL_HOST_USER = config('EMAIL_HOST_USER')
EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD')

AWS_S3_ACCESS_KEY_ID = config('AWS_S3_ACCESS_KEY_ID')
AWS_S3_SECRET_ACCESS_KEY = config('AWS_S3_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = config('AWS_STORAGE_BUCKET_NAME')
AWS_S3_REGION_NAME = config('AWS_S3_REGION_NAME')


file_save_path= 's3'

# Write dynamic DAG configs into the host repo so Airflow containers (which bind-mount
# the repo to /opt/airflow/project) can discover them at /opt/airflow/project/Configs/...
# Use host path here because Django runs on the host; Airflow sees the same files via the mount.
# Allow override via env CONFIG_DIR if needed.
config_dir = config('CONFIG_DIR', default=str(BASE_DIR / 'Configs'))

# Mapping between FlowBoard IDs and Airflow DAG IDs
# This should be updated with actual mappings between your FlowBoard records and Airflow DAGs
FLOWBOARD_TO_DAG_MAPPING = {
    # Format: "FlowBoard ID": "Airflow DAG ID" or ["DAG ID 1", "DAG ID 2", ...] to try multiple options
    # If no mapping exists, the FlowBoard ID will be used as the DAG ID
    # Add mappings as needed when FlowBoard IDs differ from Airflow DAG IDs
    "127001-20250821105336-1": ["127001"],
    "127001-20250822055501-2": ["127001"],
    # Add more mappings as needed
    "127001": ["127001"],  # Direct mapping
}

AIRFLOW_CONFIG_ROOT = os.environ.get("AIRFLOW_CONFIG_ROOT", "/opt/airflow/project/Configs/FlowBoard")
AIRFLOW_SCHEDULER_CONFIG_ROOT = os.environ.get("AIRFLOW_SCHEDULER_CONFIG_ROOT", r"C:\Users\vsahithi\Desktop\datamplify\Datamplify_backend\Datamplify-DEV\Configs\Scheduler")
